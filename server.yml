openapi: 3.0.1
info:
  title: Find my Pet
  description: >
    This is the documentation that describes the api
    for the find my pet web application.
  version: 1.0.0
tags:
  - name: User
    description: Endpoints for sign up and sign in users.
  - name: Post
    description: Endpoints related to creation/updates of posts
  - name: Comment
    description: Endpoints related to creation of comments to posts

paths:
  /user:
    post:
      tags:
        - User
      summary: Adds a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '400':
          description: Invalid Body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - User
      summary: Update a user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '204':
          description: Update successfully
        '400':
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /session:
    post:
      tags:
        - User
      summary: Sign in a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionRequestDto'
      responses:
        '201':
          description: Session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponseDto'
        '400':
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /session/refresh:
    put:
      tags:
        - User
      summary: Refresh the token
      parameters:
        - name: refresh_token
          in: header
          required: true
          description: The refresh token that was returned when session was created
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponseDto'
        '401':
          description: The given token was invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /post:
    post:
      tags:
        - Post
      summary: Creates a new post
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePostResponse'
        '400':
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - Post
      summary: Return all posts in descending order of creation time
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Will return all posts in descending order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostsResponse'
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /post/{post_id}:
    get:
      tags:
        - Post
      summary: Get a specific by its id
      parameters:
        - in: path
          name: post_id
          schema:
            type: string
          required: true
          description: Post unique identifier
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Return the post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostResponse'
    put:
      tags:
        - Post
      summary: Updates a post
      security:
        - BearerAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          description: Unique identifier of a post
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePostRequest'
      responses:
        '204':
          description: Post updated
        '400':
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /comment/{post_id}:
    post:
      tags:
        - Comment
      summary: Adds a new comment to a post
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: post_id
          schema:
            type: string
          required: true
          description: Post unique identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: Comment added succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCommentResponse'
        '400':
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - Comment
      summary: Get all coments from a specific post
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: post_id
          schema:
            type: string
          required: true
          description: Post unique identifier
      responses:
        '200':
          description: Array with all comments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllComments'
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          maxLength: 100
        email:
          type: string
          maxLength: 60
        password_hash:
          type: string
    Post:
      type: object
      properties:
        id:
          type: string
          description: Post unique key
        author_id:
          type: string
          description: Post author(user) id
        title:
          type: string
        description:
          type: string
        image_url:
          type: string
          description: post image location
        status:
          type: string
          enum: [missing, found]
        created_at:
          type: string
          format: date-time
    Comment:
      type: object
      properties:
        id:
          type: string
          description: comment unique id
        author_id:
          type: string
          description: comment author(user) unique id
        post_id:
          type: string
          description: the post the comment was made to
        comment_text:
          type: string
          maxLength: 400
        created_at:
          type: string
          format: date-time

    CreateUserRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        email:
          type: string
          maxLength: 60
          description: Valid email address. Duplicated will not be allowed.
        password:
          type: string
          maxLength: 20
        confirm_password:
          type: string
          maxLength: 20
          description: Should be equal to the password
      required:
        - name
        - email
    CreateUserResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        old_password:
          type: string
          maxLength: 20
        new_password:
          type: string
          maxLength: 20
        confirm_password:
          type: string
          maxLength: 20
      required:
        - name
        - old_password
        - new_password
        - confirm_password
    SessionRequestDto:
      type: object
      properties:
        email:
          type: string
          maxLength: 60
        password:
          type: string
          maxLength: 20
      required:
        - email
        - password
    SessionResponseDto:
      type: object
      properties:
        token:
          type: string
        refresh_token:
          type: string
        user:
          $ref: '#/components/schemas/User'
    CreatePostRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 120
        description:
          type: string
          maxLength: 800
    CreatePostResponse:
      type: object
      properties:
        post:
          $ref: '#/components/schemas/Post'
    GetPostsResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
    GetPostResponse:
      type: object
      properties:
        post:
          $ref: '#/components/schemas/Post'
    UpdatePostRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 120
        description:
          type: string
          maxLength: 800
        status:
          type: string
          enum: [missing, found]
      required:
        - title
        - description
        - status



    CreateCommentRequest:
      type: object
      properties:
        comment_test:
          type: string
          maxLength: 400
      required:
        - comment_test
    CreateCommentResponse:
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/Comment'
    GetAllComments:
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    Error:
      type: object
      properties:
        message:
          type: string
      required:
        - message

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

